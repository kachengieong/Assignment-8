{"version":3,"sources":["components/TableColumn.jsx","components/TableRow.jsx","components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["style","border","width","height","TableColumn","props","onClick","event","target","backgroundColor","color","TableRow","columns","i","push","key","uuidv4","Table","addRow","setState","rows","state","addColumn","removeRow","removeColumn","this","table","Component","App","handleChange","value","bind","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPASA,IAAMA,EAAQ,CACZC,OAAQ,kBACRC,MAAO,OACPC,OAAQ,QAGKC,EAbf,SAAqBC,GAInB,OAAO,wBAAIL,MAAOA,EAAOM,QAHD,SAACC,GACvBA,EAAMC,OAAOR,MAAMS,gBAAkBJ,EAAMK,U,QCUhCC,MAVf,SAAkBN,GAGhB,IAFA,IAAIO,EAAU,GAELC,EAAI,EAAGA,EAAIR,EAAMO,QAASC,IACjCD,EAAQE,KAAK,kBAAC,EAAD,CAAaC,IAAKC,cAAUN,MAAOL,EAAMK,SAGxD,OAAO,4BAAKE,ICmDCK,E,kDAzDb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAeRa,OAAS,WACP,EAAKC,SAAS,CAAEC,KAAM,EAAKC,MAAMD,KAAO,KAjBvB,EAoBnBE,UAAY,WACV,EAAKH,SAAS,CAAEP,QAAS,EAAKS,MAAMT,QAAU,KArB7B,EAwBnBW,UAAY,WACV,EAAKJ,SAAS,CAAEC,KAAM,EAAKC,MAAMD,KAAO,KAzBvB,EA4BnBI,aAAe,WACb,EAAKL,SAAS,CAAEP,QAAS,EAAKS,MAAMT,QAAU,KA3B9C,EAAKS,MAAQ,CACXX,MAAO,EAAKL,MAAMK,MAClBU,KAAM,EACNR,QAAS,GALM,E,iEAUda,KAAKpB,MAAMK,QAAUe,KAAKJ,MAAMX,OAEjCe,KAAKN,SAAS,CAACT,MAAOe,KAAKpB,MAAMK,U,+BAqBnC,IAAIgB,EAAQ,GAEZ,IAAKA,EACH,OAAO,4BAEP,IAAK,IAAIb,EAAI,EAAGA,EAAIY,KAAKJ,MAAMD,KAAMP,IACnCa,EAAMZ,KAAK,kBAAC,EAAD,CAAUC,IAAKC,cAAUJ,QAASa,KAAKJ,MAAMT,QAASF,MAAOe,KAAKJ,MAAMX,SAIvF,OACE,6BACE,4BAAQJ,QAASmB,KAAKP,QAAtB,WACA,4BAAQZ,QAASmB,KAAKH,WAAtB,cACA,4BAAQhB,QAASmB,KAAKF,WAAtB,cACA,4BAAQjB,QAASmB,KAAKD,cAAtB,iBACA,+BACE,+BAAQE,S,GAnDEC,aC6BLC,G,wDA5Bb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAKRwB,aAAe,SAACtB,GACd,EAAKY,SAAS,CAACT,MAAOH,EAAMC,OAAOsB,SALnC,EAAKT,MAAQ,CAACX,MAAO,SACrB,EAAKmB,aAAe,EAAKA,aAAaE,KAAlB,gBAHH,E,qDAWjB,OACE,6BACE,4BAAQD,MAAOL,KAAKJ,MAAMX,MAAOsB,SAAUP,KAAKI,cAChD,4BAAQC,MAAM,QAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,WAEF,kBAAC,EAAD,CAAOpB,MAAOe,KAAKJ,MAAMX,a,GAvBbiB,cCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.71e73713.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TableColumn(props) {\r\n  const handleCellClick = (event) => {\r\n    event.target.style.backgroundColor = props.color;\r\n  }\r\n  return <td style={style} onClick={handleCellClick}></td>;\r\n}\r\n\r\nconst style = {\r\n  border: '1px solid black',\r\n  width: '50px',\r\n  height: '50px',\r\n};\r\n\r\nexport default TableColumn;\r\n","import React from 'react';\r\nimport TableColumn from './TableColumn';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction TableRow(props) {\r\n  let columns = [];\r\n\r\n  for (let i = 0; i < props.columns; i++) {\r\n    columns.push(<TableColumn key={uuidv4()} color={props.color} />);\r\n  }\r\n\r\n  return <tr>{columns}</tr>;\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { Component } from 'react';\r\nimport TableRow from './TableRow';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass Table extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      color: this.props.color,\r\n      rows: 0,\r\n      columns: 1,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if(this.props.color !== this.state.color)\r\n    {\r\n      this.setState({color: this.props.color});\r\n    }\r\n  }\r\n\r\n  addRow = () => {\r\n    this.setState({ rows: this.state.rows + 1 });\r\n  };\r\n\r\n  addColumn = () => {\r\n    this.setState({ columns: this.state.columns + 1 });\r\n  };\r\n\r\n  removeRow = () => {\r\n    this.setState({ rows: this.state.rows - 1 });\r\n  };\r\n\r\n  removeColumn = () => {\r\n    this.setState({ columns: this.state.columns - 1 });\r\n  };\r\n\r\n  render() {\r\n    let table = [];\r\n\r\n    if (!table) {\r\n      return <p></p>;\r\n    } else {\r\n      for (let i = 0; i < this.state.rows; i++) {\r\n        table.push(<TableRow key={uuidv4()} columns={this.state.columns} color={this.state.color} />);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <button onClick={this.addRow}>Add Row</button>\r\n        <button onClick={this.addColumn}>Add Column</button>\r\n        <button onClick={this.removeRow}>Remove Row</button>\r\n        <button onClick={this.removeColumn}>Remove Column</button>\r\n        <table>\r\n          <tbody>{table}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\r\nimport Table from './components/Table';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {color: \"white\"};\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({color: event.target.value});\r\n  } \r\n  // Select a color from dropdown menu of colors\r\n  render() {\r\n    return (\r\n      <div>\r\n        <select value={this.state.color} onChange={this.handleChange}>\r\n        <option value=\"none\">---</option>        \r\n        <option value=\"red\">Red</option>\r\n        <option value=\"blue\">Blue</option>\r\n        <option value=\"gray\">Gray</option>\r\n        <option value=\"green\">Green</option>\r\n        <option value=\"yellow\">Yellow</option>\r\n        <option value=\"orange\">Orange</option>\r\n      </select>\r\n      <Table color={this.state.color} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}